

public class Zad1 {
//. Napisz program, który sprawdzi, czy dana liczba znajduje się w tablicy n liczb całkowitych.
//Wykorzystaj funkcję realizującą algorytm przeszukiwania liniowego. Wynikiem funkcji powinna być
//pozycja szukanego elementu lub wartość n, jeśli elementu nie ma w tablicy.
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Random random = new Random();

        System.out.print("Podaj rozmiar tablicy: ");
        int n = scanner.nextInt();

        int[] tablica = new int[n];

        System.out.println("Automatycznie generowane elementy tablicy:");

        for (int i = 0; i < n; i++) {
            tablica[i] = random.nextInt(100); // Zakres losowanych liczb od 0 do 99 (możesz dostosować zakres według potrzeb)
            System.out.print(tablica[i] + " ");
        }

        System.out.println(); // Nowa linia dla czytelności

        System.out.print("Podaj szukaną liczbę: ");
        int szukanaLiczba = scanner.nextInt();

        int wynik = szukanieLiniowe(tablica, szukanaLiczba);

        if (wynik == n) {
            System.out.println("Element nie został znaleziony w tablicy.");
        } else {
            System.out.println("Element znajduje się na pozycji: " + wynik);
        }
    }

    static int szukanieLiniowe(int[] tablica, int szukana) {
        int n = tablica.length;

        for (int i = 0; i < n; i++) {
            if (tablica[i] == szukana) {
                return i; // Zwraca pozycję, na której znajduje się szukana liczba.
            }
        }

        return n; // Zwraca n, gdy element nie został znaleziony w tablicy.
    }
}

////////////////////////////////////////////////


public class Zad2 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Random random = new Random();
//Napisz program, który sprawdzi, czy dana liczba znajduje się w uporządkowanej tablicy n liczb 
//całkowitych. Wykorzystaj funkcję realizującą algorytm przeszukiwania binarnego. Wynikiem funkcji 
//powinna być pozycja szukanego elementu lub wartość n, jeśli szukanego elementu nie ma w tablicy.
        System.out.print("Podaj rozmiar tablicy: ");
        int n = scanner.nextInt();

        int[] tablica = new int[n];

        System.out.println("Automatycznie generowane elementy tablicy:");

        for (int i = 0; i < n; i++) {
            tablica[i] = random.nextInt(100); // Zakres losowanych liczb od 0 do 99 (możesz dostosować zakres według potrzeb)
            System.out.print(tablica[i] + " ");
        }

        Arrays.sort(tablica);
        System.out.println();
        System.out.println(Arrays.toString(tablica));

        System.out.println(); // Nowa linia dla czytelności

        System.out.print("Podaj szukaną liczbę: ");
        int szukanaLiczba = scanner.nextInt();


        int wynik = binarySearch0(tablica, szukanaLiczba);

        if (wynik == n) {
            System.out.println("Element nie został znaleziony w tablicy.");
        } else {
            System.out.println("Element znajduje się na pozycji: " + wynik);
        }

    }



    private static int binarySearch0(int[] a,int key) {
        int low = 0;
        int high = a.length - 1;

        while (low <= high) {
            int mid = (low + high) >>> 1;
            int midVal = a[mid];

            if (midVal < key)
                low = mid + 1;
            else if (midVal > key)
                high = mid - 1;
            else
                return mid; // key found
        }
        return 0;  // key not found.
    }

}



/////////////////////////////////////


public class Zad3 {
//Napisz program wyznaczający rozpiętość zbioru danych znajdujących się w tablicy n liczb
//całkowitych.

    public static void main(String[] args) {
        int[] tablica = {3, 10, 5, 2, 8}; // Przykładowa tablica liczb całkowitych

        int rozpietosc = wyznaczRozpietosc(tablica);

        System.out.println("Rozpiętość zbioru danych: " + rozpietosc);

        long start = System.currentTimeMillis();
// ...
        long finish = System.currentTimeMillis();
        long timeElapsed = finish - start;

        System.out.println(timeElapsed);
    }

    static int wyznaczRozpietosc(int[] tablica) {
        if (tablica.length == 0) {
            throw new IllegalArgumentException("Tablica jest pusta.");
        }

        // Inicjalizujemy min i max wartościami pierwszego elementu tablicy.
        int minWartosc = tablica[0];
        int maxWartosc = tablica[0];

        int min = Arrays.stream(tablica).min().getAsInt();
        int max = Arrays.stream(tablica).max().getAsInt();


        for (int i = 1; i < tablica.length; i++) {
            if (tablica[i] < minWartosc) {
                minWartosc = tablica[i];
            } else if (tablica[i] > maxWartosc) {
                maxWartosc = tablica[i];
            }
        }

        // Rozpiętość to różnica między największą a najmniejszą wartością.
        return maxWartosc - minWartosc;
    }
}

////////////


public class Zad 4 {
    public static void main(String[] args) {
//Napisz program, który w tablicy n liczb całkowitych z zakresu od 0 do 999 999 999 znajdzie liczbę o
//największej sumie cyfr.

        System.out.print("Podaj rozmiar tablicy: ");
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();

        int[] tablica = new int[n];

        for (int i = 0; i < n; i++) {
            Random random = new Random();
            tablica[i] = random.nextInt(100000); // Zakres losowanych liczb od 0 do 99 (możesz dostosować zakres według potrzeb)
            System.out.print(tablica[i] + " ");
        }
        System.out.println();
        System.out.println(znajdzLiczbeZNajwiekszaSuma(tablica));
    }
    public static int znajdzLiczbeZNajwiekszaSuma(int[] tablica) {
        if (tablica.length == 0) {
            throw new IllegalArgumentException("Tablica jest pusta.");
        }

        int maksymalnaSuma = -1; // Zaczynamy od ujemnej wartości, aby zawsze znaleźć liczbę o dodatniej sumie.
        int liczbaZNajwiekszaSuma = -1;

        for (int liczba : tablica) {
            int sumaCyfr = obliczSumeCyfr(liczba);

            if (sumaCyfr > maksymalnaSuma) {
                maksymalnaSuma = sumaCyfr;
                liczbaZNajwiekszaSuma = liczba;
            }
        }

        return liczbaZNajwiekszaSuma;
    }

    public static int obliczSumeCyfr(int liczba) {
        int suma = 0;

        while (liczba > 0) {
            suma += liczba % 10; // Pobieramy ostatnią cyfrę i dodajemy do sumy.
            liczba /= 10; // Usuwamy ostatnią cyfrę.
        }

        return suma;
    }
}


//////////////////

public class Zadanie5 {
// Napisz program, który w tablicy n liczb całkowitych znajdzie pierwszy element parzysty. Przyjmij, że
//w tablicy najpierw występują liczby nieparzyste, potem parzyste oraz że tablica zawiera co najmniej
//jedną liczbę nieparzystą i jedną parzystą. Zastosuj algorytm przeszukiwania binarnego.

    public static void main(String[] args) {
        int[] tablica = {1, 3, 5, 8, 10, 12, 14}; // Przykładowa posortowana tablica liczb całkowitych

        int indeksPierwszegoParzystego = znajdzPierwszyElementParzysty(tablica);

        System.out.println("Pierwszy element parzysty znajduje się na indeksie: " + indeksPierwszegoParzystego);
    }

    static int znajdzPierwszyElementParzysty(int[] tablica) {
        int lewy = 0;
        int prawy = tablica.length - 1;

        while (lewy <= prawy) {
            int srodek = (lewy + prawy) / 2;

            if (tablica[srodek] % 2 == 0) {
                // Jeśli środkowy element jest parzysty, sprawdzamy lewą połowę.
                prawy = srodek - 1;
            } else {
                // Jeśli środkowy element jest nieparzysty, sprawdzamy prawą połowę.
                lewy = srodek + 1;
            }
        }

        // Po wyjściu z pętli lewy wskaże pierwszy element parzysty.
        return lewy;
    }
}


//////////////

public class Zadanie7 {
//. Napisz funkcję, która dla danej liczby całkowitej dodatniej znajdzie jej pierwiastek kwadratowy
//dyskretny. Zastosuj algorytm przeszukiwania binarnego. Uwaga: Pierwiastek dyskretny z danej liczby
//to największa liczba całkowita mniejsza lub równa pierwiastkowi z tej liczby.

    public static void main(String[] args) {
        int liczba = 64; // Przykładowa liczba całkowita dodatnia

        int pierwiastek = znajdzPierwiastekDyskretny(liczba);

        System.out.println("Pierwiastek kwadratowy dyskretny z liczby " + liczba + " to: " + pierwiastek);
    }

    public static int znajdzPierwiastekDyskretny(int liczba) {
        if (liczba < 0) {
            throw new IllegalArgumentException("Liczba musi być dodatnia.");
        }

        if (liczba == 0 || liczba == 1) {
            return liczba; // Pierwiastek z 0 i 1 to sama liczba.
        }

        int lewy = 1;
        int prawy = liczba;

        while (lewy <= prawy) {
            int srodek = (lewy + prawy) / 2;

            if (srodek * srodek == liczba) {
                return srodek; // Znaleziono dokładny pierwiastek.
            } else if (srodek * srodek < liczba) {
                lewy = srodek + 1;
            } else {
                prawy = srodek - 1;
            }
        }

        // Po wyjściu z pętli, prawy wskaże największą liczbę całkowitą mniejszą lub równą pierwiastkowi.
        return prawy;
    }
}


public class Zadanie8 {


//Napisz funkcję, której wynikiem jest określenie liczby elementów, które mieszczą się w określonym
//przedziale liczbowym, czyli między dwoma liczbami a i b (włączając te liczby). Te liczby, a i b, to liczby
//całkowite, przy czym a jest mniejsze od b.

    public static void main(String[] args) {
        int a = 5;
        int b = 10;
        int[] tablica = {2, 4, 7, 8, 10, 12, 15, 20};

        int liczbaElementow = liczbaElementowWPrzedziale(tablica, a, b);

        System.out.println("Liczba elementów w przedziale [" + a + ", " + b + "]: " + liczbaElementow);
    }

    public static int liczbaElementowWPrzedziale(int[] tablica, int a, int b) {
        if (a > b) {
            throw new IllegalArgumentException("Liczba a musi być mniejsza lub równa liczbie b.");
        }

        int liczbaElementow = 0;

        for (int liczba : tablica) {
            if (liczba >= a && liczba <= b) {
                liczbaElementow++;
            }
        }

        return liczbaElementow;
    }
}

///////////////////////////////


public class Zadanie9 {

    public static void main(String[] args) {
        int dolnyZakres = 0;
        int gornyZakres = 5000000;
        int liczbaDoZgadniecia = losujLiczbe(dolnyZakres, gornyZakres);
        int iloscPytan = 20;
        int szanse = 1;

        System.out.println("Zgadnij liczbę z zakresu od " + dolnyZakres + " do " + gornyZakres + ".");
        System.out.println("Masz " + iloscPytan + " pytań. Pamiętaj, że możesz się pomylić raz.");

        Scanner scanner = new Scanner(System.in);

        while (iloscPytan > 0 && szanse > 0) {
            System.out.print("Czy szukana liczba jest mniejsza od ");
            int propozycja = (dolnyZakres + gornyZakres) / 2;
            System.out.print(propozycja + "? (Tak/Nie): ");

            String odpowiedz = scanner.nextLine().trim().toLowerCase();

            if (odpowiedz.equals("tak")) {
                gornyZakres = propozycja - 1;
            } else if (odpowiedz.equals("nie")) {
                dolnyZakres = propozycja + 1;
            } else {
                System.out.println("Błędna odpowiedź. Wprowadź Tak lub Nie.");
                continue;
            }

            iloscPytan--;

            System.out.println("Liczba możliwych pytań: " + iloscPytan);

            if (iloscPytan > 0) {
                System.out.print("Czy chcesz odgadnąć liczbę? (Tak/Nie): ");
                String odgadnij = scanner.nextLine().trim().toLowerCase();

                if (odgadnij.equals("tak")) {
                    System.out.print("Podaj swoją propozycję liczby: ");
                    int propozycjaOdgadniecia = scanner.nextInt();
                    scanner.nextLine();  // Konsumujemy znak nowej linii

                    if (propozycjaOdgadniecia == liczbaDoZgadniecia) {
                        System.out.println("Brawo! Zgadłeś liczbę!");
                        break;
                    } else {
                        System.out.println("Niestety, nie zgadłeś liczby. Tracisz jedną szansę.");
                        szanse--;

                        if (szanse == 0) {
                            System.out.println("Przegrałeś. Koniec gry.");
                            break;
                        }
                    }
                }
            }
        }

        scanner.close();
    }

    static int losujLiczbe(int dolnyZakres, int gornyZakres) {
        return (int) (Math.random() * (gornyZakres - dolnyZakres + 1) + dolnyZakres);
    }
}
